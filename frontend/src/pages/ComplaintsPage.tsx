"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Search, Filter, RotateCcw, Lock } from "lucide-react"
import { complaintsService, type Complaint } from "../services/api"
import styles from "../styles/DataPage.module.css"
import { usePageTitle } from "../hooks/usePageTitle"

const ComplaintsPage: React.FC = () => {
  usePageTitle("–†–µ–∫–ª–∞–º–∞—Ü–∏–∏")
  const [complaints, setComplaints] = useState<Complaint[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isAuthError, setIsAuthError] = useState(false)
  const [filters, setFilters] = useState({
    search: "",
    failure_node: "",
    recovery_method: "",
    machine_serial: "",
  })

  const fetchComplaints = async () => {
    setLoading(true)
    setError(null)
    setIsAuthError(false)
    try {
      const response = await complaintsService.getAll()
      setComplaints(response.data.results || response.data)
    } catch (err: any) {
      if (err.response?.status === 403) {
        setIsAuthError(true)
        setError("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
      } else {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è—Ö")
      }
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchComplaints()
  }, [])

  const handleFilterChange = (key: string, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }))
  }

  const handleSearch = () => {
    console.log("–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", filters)
  }

  const handleReset = () => {
    setFilters({
      search: "",
      failure_node: "",
      recovery_method: "",
      machine_serial: "",
    })
  }

  const filteredComplaints = complaints.filter((complaint) => {
    const matchesSearch =
      !filters.search ||
      complaint.failure_description.toLowerCase().includes(filters.search.toLowerCase()) ||
      complaint.machine_serial.toLowerCase().includes(filters.search.toLowerCase())

    return matchesSearch
  })

  return (
    <div className={styles.container}>
      <div className={styles.content}>
        {/* Header */}
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div className={styles.headerIcon}>üìã</div>
            <h1 className={styles.title}>–†–µ–∫–ª–∞–º–∞—Ü–∏–∏</h1>
            <p className={styles.subtitle}>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
            </p>
          </div>
        </div>

        {/* Auth Error */}
        {isAuthError ? (
          <div className={styles.authErrorSection}>
            <div className={styles.authErrorCard}>
              <Lock size={48} className={styles.authErrorIcon} />
              <h3 className={styles.authErrorTitle}>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
              <p className={styles.authErrorText}>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
            </div>
          </div>
        ) : (
          <>
            {/* Filters */}
            <div className={styles.filtersSection}>
              <h2 className={styles.filtersTitle}>
                <Filter size={24} />
                –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
              </h2>

              <div className={styles.filtersGrid}>
                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–ü–æ–∏—Å–∫</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä..."
                    value={filters.search}
                    onChange={(e) => handleFilterChange("search", e.target.value)}
                  />
                </div>

                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–£–∑–µ–ª –æ—Ç–∫–∞–∑–∞</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —É–∑–µ–ª –æ—Ç–∫–∞–∑–∞..."
                    value={filters.failure_node}
                    onChange={(e) => handleFilterChange("failure_node", e.target.value)}
                  />
                </div>

                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
                    value={filters.recovery_method}
                    onChange={(e) => handleFilterChange("recovery_method", e.target.value)}
                  />
                </div>

                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä..."
                    value={filters.machine_serial}
                    onChange={(e) => handleFilterChange("machine_serial", e.target.value)}
                  />
                </div>
              </div>

              <div className={styles.filterButtons}>
                <button className={`${styles.filterButton} ${styles.filterButtonPrimary}`} onClick={handleSearch}>
                  <Search size={20} />
                  –ù–∞–π—Ç–∏
                </button>
                <button className={`${styles.filterButton} ${styles.filterButtonSecondary}`} onClick={handleReset}>
                  <RotateCcw size={20} />
                  –°–±—Ä–æ—Å–∏—Ç—å
                </button>
              </div>
            </div>

            {/* Data Table */}
            <div className={styles.dataSection}>
              <div className={styles.dataHeader}>
                <div className={styles.dataTitle}>üö® –ó–∞–ø–∏—Å–∏ –æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è—Ö</div>
                <div className={styles.dataCount}>–ù–∞–π–¥–µ–Ω–æ: {filteredComplaints.length}</div>
              </div>

              <div className={styles.tableContainer}>
                {loading ? (
                  <div className={styles.loadingState}>
                    <div className={styles.loadingSpinner}></div>
                    <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                  </div>
                ) : error && !isAuthError ? (
                  <div className={styles.errorState}>
                    <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                    <h3 className={styles.errorTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p className={styles.errorText}>{error}</p>
                  </div>
                ) : filteredComplaints.length === 0 ? (
                  <div className={styles.emptyState}>
                    <div className={styles.emptyStateIcon}>üîç</div>
                    <h3 className={styles.emptyStateTitle}>–†–µ–∫–ª–∞–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p className={styles.emptyStateText}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
                  </div>
                ) : (
                  <table className={styles.table}>
                    <thead className={styles.tableHeader}>
                      <tr>
                        <th className={styles.tableHeaderCell}>–î–∞—Ç–∞ –æ—Ç–∫–∞–∑–∞</th>
                        <th className={styles.tableHeaderCell}>–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å</th>
                        <th className={styles.tableHeaderCell}>–£–∑–µ–ª –æ—Ç–∫–∞–∑–∞</th>
                        <th className={styles.tableHeaderCell}>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞</th>
                        <th className={styles.tableHeaderCell}>–°–ø–æ—Å–æ–± –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</th>
                        <th className={styles.tableHeaderCell}>–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è</th>
                        <th className={styles.tableHeaderCell}>–ú–∞—à–∏–Ω–∞</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredComplaints.map((complaint) => (
                        <tr
                          key={complaint.id}
                          className={`${styles.tableRow} ${styles.tableRowClickable}`}
                          onClick={() => (window.location.href = `/complaints/${complaint.id}`)}
                          style={{ cursor: "pointer" }}
                        >
                          <td className={styles.tableCell}>
                            {complaint.failure_date
                              ? new Date(complaint.failure_date).toLocaleDateString("ru-RU")
                              : "‚Äî"}
                          </td>
                          <td className={styles.tableCell}>{complaint.operating_hours || "‚Äî"}</td>
                          <td className={`${styles.tableCell} ${styles.tableCellBold}`}>
                            {complaint.failure_node?.name || "‚Äî"}
                          </td>
                          <td className={styles.tableCell}>
                            <div style={{ maxWidth: "200px", wordWrap: "break-word" }}>
                              {complaint.failure_description || "‚Äî"}
                            </div>
                          </td>
                          <td className={styles.tableCell}>
                            <div>{complaint.recovery_method?.name || "‚Äî"}</div>
                            {complaint.spare_parts && (
                              <div className={styles.tableCellMuted}>–ó–∞–ø—á–∞—Å—Ç–∏: {complaint.spare_parts}</div>
                            )}
                          </td>
                          <td className={styles.tableCell}>
                            <div className={styles.tableCellBold}>
                              {complaint.downtime ? `${complaint.downtime} –¥–Ω–µ–π` : "‚Äî"}
                            </div>
                            {complaint.recovery_date && (
                              <div className={styles.tableCellMuted}>
                                –¥–æ {new Date(complaint.recovery_date).toLocaleDateString("ru-RU")}
                              </div>
                            )}
                          </td>
                          <td className={styles.tableCell}>
                            <div className={styles.tableCellBold}>‚Ññ {complaint.machine_serial || "‚Äî"}</div>
                            <div className={styles.tableCellMuted}>{complaint.service_company_name || "‚Äî"}</div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                )}
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

export default ComplaintsPage
