"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Search, Filter, RotateCcw } from "lucide-react"
import { machineService, type Machine } from "../services/api"
import styles from "../styles/DataPage.module.css"
import { usePageTitle } from "../hooks/usePageTitle"

const MachinesPage: React.FC = () => {
  usePageTitle("–ú–∞—à–∏–Ω—ã")
  const [machines, setMachines] = useState<Machine[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [filters, setFilters] = useState({
    search: "",
    technique_model: "",
    engine_model: "",
    transmission_model: "",
  })

  const fetchMachines = async () => {
    setLoading(true)
    setError(null)
    try {
      const response = await machineService.getAll()
      setMachines(response.data.results || response.data)
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö")
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMachines()
  }, [])

  const handleFilterChange = (key: string, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }))
  }

  const handleSearch = () => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log("–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", filters)
  }

  const handleReset = () => {
    setFilters({
      search: "",
      technique_model: "",
      engine_model: "",
      transmission_model: "",
    })
  }

  const filteredMachines = machines.filter((machine) => {
    const matchesSearch =
      !filters.search ||
      machine.serial_number.toLowerCase().includes(filters.search.toLowerCase()) ||
      machine.engine_serial.toLowerCase().includes(filters.search.toLowerCase())

    return matchesSearch
  })

  return (
    <div className={styles.container}>
      <div className={styles.content}>
        {/* Header */}
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div className={styles.headerIcon}>üöõ</div>
            <h1 className={styles.title}>–ú–∞—à–∏–Ω—ã –°–ò–õ–ê–ù–¢</h1>
            <p className={styles.subtitle}>
              –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Ö–Ω–∏–∫–µ, –µ—ë –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
            </p>
          </div>
        </div>

        {/* Filters */}
        <div className={styles.filtersSection}>
          <h2 className={styles.filtersTitle}>
            <Filter size={24} />
            –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
          </h2>

          <div className={styles.filtersGrid}>
            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –∏–ª–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è..."
                value={filters.search}
                onChange={(e) => handleFilterChange("search", e.target.value)}
              />
            </div>

            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏..."
                value={filters.technique_model}
                onChange={(e) => handleFilterChange("technique_model", e.target.value)}
              />
            </div>

            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è..."
                value={filters.engine_model}
                onChange={(e) => handleFilterChange("engine_model", e.target.value)}
              />
            </div>

            <div className={styles.filterGroup}>
              <label className={styles.filterLabel}>–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏</label>
              <input
                type="text"
                className={styles.filterInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏..."
                value={filters.transmission_model}
                onChange={(e) => handleFilterChange("transmission_model", e.target.value)}
              />
            </div>
          </div>

          <div className={styles.filterButtons}>
            <button className={`${styles.filterButton} ${styles.filterButtonPrimary}`} onClick={handleSearch}>
              <Search size={20} />
              –ù–∞–π—Ç–∏
            </button>
            <button className={`${styles.filterButton} ${styles.filterButtonSecondary}`} onClick={handleReset}>
              <RotateCcw size={20} />
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </div>

        {/* Data Table */}
        <div className={styles.dataSection}>
          <div className={styles.dataHeader}>
            <div className={styles.dataTitle}>üìä –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω</div>
            <div className={styles.dataCount}>–ù–∞–π–¥–µ–Ω–æ: {filteredMachines.length}</div>
          </div>

          <div className={styles.tableContainer}>
            {loading ? (
              <div className={styles.loadingState}>
                <div className={styles.loadingSpinner}></div>
                <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
              </div>
            ) : error ? (
              <div className={styles.errorState}>
                <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                <h3 className={styles.errorTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p className={styles.errorText}>{error}</p>
              </div>
            ) : filteredMachines.length === 0 ? (
              <div className={styles.emptyState}>
                <div className={styles.emptyStateIcon}>üîç</div>
                <h3 className={styles.emptyStateTitle}>–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p className={styles.emptyStateText}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
              </div>
            ) : (
              <table className={styles.table}>
                <thead className={styles.tableHeader}>
                  <tr>
                    <th className={styles.tableHeaderCell}>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä</th>
                    <th className={styles.tableHeaderCell}>–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏</th>
                    <th className={styles.tableHeaderCell}>–î–≤–∏–≥–∞—Ç–µ–ª—å</th>
                    <th className={styles.tableHeaderCell}>–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è</th>
                    <th className={styles.tableHeaderCell}>–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredMachines.map((machine) => (
                    <tr
                      key={machine.id}
                      className={`${styles.tableRow} ${styles.tableRowClickable}`}
                      onClick={() => (window.location.href = `/machines/${machine.id}`)}
                      style={{ cursor: "pointer" }}
                    >
                      <td className={`${styles.tableCell} ${styles.tableCellBold}`}>{machine.serial_number}</td>
                      <td className={styles.tableCell}>{machine.technique_model?.name || "‚Äî"}</td>
                      <td className={styles.tableCell}>
                        <div>{machine.engine_model?.name || "‚Äî"}</div>
                        <div className={styles.tableCellMuted}>‚Ññ {machine.engine_serial || "‚Äî"}</div>
                      </td>
                      <td className={styles.tableCell}>
                        <div>{machine.transmission_model?.name || "‚Äî"}</div>
                        <div className={styles.tableCellMuted}>‚Ññ {machine.transmission_serial || "‚Äî"}</div>
                      </td>
                      <td className={styles.tableCell}>
                        {machine.shipment_date ? new Date(machine.shipment_date).toLocaleDateString("ru-RU") : "‚Äî"}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default MachinesPage
