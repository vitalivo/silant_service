"use client"

import type React from "react"
import { useState } from "react"
import { Search } from "lucide-react"
import { machineService } from "../services/api"
import styles from "../styles/HomePage.module.css"
import AuthService from "../components/AuthService"
import AuthTabs from "../components/AuthTabs"
import { usePageTitle } from "../hooks/usePageTitle"

const HomePage: React.FC = () => {
  usePageTitle("–ì–ª–∞–≤–Ω–∞—è")
  const [serialNumber, setSerialNumber] = useState("")
  const [machine, setMachine] = useState<any>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!serialNumber.trim()) return

    setLoading(true)
    setError(null)

    try {
      const response = await machineService.searchBySerial(serialNumber)
      setMachine(response.data)
    } catch (err: any) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", err)
      if (err.response?.status === 404) {
        setError("–ú–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
      } else {
        setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`)
      }
      setMachine(null)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className={styles.container}>
      <AuthService>
        {({ user, logout }) => (
          <>
            {user ? (
              // –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
              <AuthTabs user={user} onLogout={logout} />
            ) : (
              // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
              <>
                {/* Hero Section —Å –ø–æ–∏—Å–∫–æ–º */}
                <section className={styles.hero}>
                  <div className={styles.heroContent}>
                    <div className={styles.logoContainer}>
                      <div className={styles.logoWrapper}>
                        <img src="/public/images/Logo1.jpg" alt="–°–∏–ª–∞–Ω—Ç" className={styles.logo} />
                      </div>
                    </div>

                    <div className={styles.badge}>
                      <span style={{ marginRight: "8px" }}>‚ö°</span>
                      –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –°–ò–õ–ê–ù–¢
                    </div>

                    <h1 className={styles.title}>
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é
                      <span className={styles.titleGradient}>—Ç–µ—Ö–Ω–∏–∫—É –°–ò–õ–ê–ù–¢</span>
                    </h1>

                    <p className={styles.subtitle}>
                      –í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
                      –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
                    </p>

                    <form onSubmit={handleSearch} className={styles.searchForm}>
                      <div className={styles.searchContainer}>
                        <input
                          type="text"
                          value={serialNumber}
                          onChange={(e) => setSerialNumber(e.target.value)}
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã..."
                          className={styles.searchInput}
                        />
                        <button type="submit" disabled={loading} className={styles.searchButton}>
                          <Search size={20} />
                          {loading ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏"}
                        </button>
                      </div>
                    </form>
                  </div>
                </section>

                {/* Error Message */}
                {error && (
                  <section className={styles.errorSection}>
                    <div className={styles.errorContainer}>
                      <div className={styles.errorCard}>
                        <span style={{ fontSize: "24px" }}>‚ö†Ô∏è</span>
                        <p className={styles.errorText}>{error}</p>
                      </div>
                    </div>
                  </section>
                )}

                {/* Machine Info */}
                {machine && (
                  <section className={styles.machineSection}>
                    <div className={styles.machineContainer}>
                      <div className={styles.machineCard}>
                        <div className={styles.machineHeader}>
                          <div className={styles.machineHeaderContent}>
                            <div className={styles.machineIcon}>üèÜ</div>
                            <div>
                              <h2 className={styles.machineTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ</h2>
                              <p className={styles.machineSerial}>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {machine.serial_number}</p>
                            </div>
                          </div>
                        </div>

                        <div className={styles.machineContent}>
                          <div className={styles.machineGrid}>
                            {[
                              { label: "–ú–æ–¥–µ–ª—å —Ç–µ—Ö–Ω–∏–∫–∏", value: machine.technique_model?.name, icon: "üöõ" },
                              { label: "–ú–æ–¥–µ–ª—å –¥–≤–∏–≥–∞—Ç–µ–ª—è", value: machine.engine_model?.name, icon: "‚öôÔ∏è" },
                              { label: "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è", value: machine.engine_serial, icon: "üî¢" },
                              { label: "–ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏", value: machine.transmission_model?.name, icon: "üîß" },
                              { label: "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏", value: machine.transmission_serial, icon: "üî¢" },
                              {
                                label: "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏",
                                value: machine.shipment_date
                                  ? new Date(machine.shipment_date).toLocaleDateString("ru-RU")
                                  : "‚Äî",
                                icon: "üìÖ",
                              },
                            ].map((item, index) => (
                              <div key={index} className={styles.machineItem}>
                                <div className={styles.machineItemHeader}>
                                  <span className={styles.machineItemIcon}>{item.icon}</span>
                                  <h3 className={styles.machineItemLabel}>{item.label}</h3>
                                </div>
                                <p className={styles.machineItemValue}>{item.value || "‚Äî"}</p>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </section>
                )}
              </>
            )}
          </>
        )}
      </AuthService>
    </div>
  )
}

export default HomePage
