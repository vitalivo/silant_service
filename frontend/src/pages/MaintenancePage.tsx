"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Search, Filter, RotateCcw, Lock } from "lucide-react"
import { maintenanceService, type Maintenance } from "../services/api"
import styles from "../styles/DataPage.module.css"
import { usePageTitle } from "../hooks/usePageTitle"

const MaintenancePage: React.FC = () => {
  usePageTitle("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
  const [maintenance, setMaintenance] = useState<Maintenance[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isAuthError, setIsAuthError] = useState(false)
  const [filters, setFilters] = useState({
    search: "",
    maintenance_type: "",
    machine_serial: "",
    service_company: "",
  })

  const fetchMaintenance = async () => {
    setLoading(true)
    setError(null)
    setIsAuthError(false)
    try {
      const response = await maintenanceService.getAll()
      setMaintenance(response.data.results || response.data)
    } catch (err: any) {
      if (err.response?.status === 403) {
        setIsAuthError(true)
        setError("–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
      } else {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏")
      }
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMaintenance()
  }, [])

  const handleFilterChange = (key: string, value: string) => {
    setFilters((prev) => ({ ...prev, [key]: value }))
  }

  const handleSearch = () => {
    console.log("–ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", filters)
  }

  const handleReset = () => {
    setFilters({
      search: "",
      maintenance_type: "",
      machine_serial: "",
      service_company: "",
    })
  }

  const filteredMaintenance = maintenance.filter((item) => {
    const matchesSearch =
      !filters.search ||
      item.work_order_number.toLowerCase().includes(filters.search.toLowerCase()) ||
      item.machine_serial.toLowerCase().includes(filters.search.toLowerCase())

    return matchesSearch
  })

  return (
    <div className={styles.container}>
      <div className={styles.content}>
        {/* Header */}
        <div className={styles.header}>
          <div className={styles.headerContent}>
            <div className={styles.headerIcon}>üîß</div>
            <h1 className={styles.title}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h1>
            <p className={styles.subtitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –º–∞—à–∏–Ω</p>
          </div>
        </div>

        {/* Auth Error */}
        {isAuthError ? (
          <div className={styles.authErrorSection}>
            <div className={styles.authErrorCard}>
              <Lock size={48} className={styles.authErrorIcon} />
              <h3 className={styles.authErrorTitle}>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h3>
              <p className={styles.authErrorText}>
                –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
              </p>
            </div>
          </div>
        ) : (
          <>
            {/* Filters */}
            <div className={styles.filtersSection}>
              <h2 className={styles.filtersTitle}>
                <Filter size={24} />
                –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
              </h2>

              <div className={styles.filtersGrid}>
                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–ü–æ–∏—Å–∫</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–ù–æ–º–µ—Ä –Ω–∞—Ä—è–¥–∞ –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä..."
                    value={filters.search}
                    onChange={(e) => handleFilterChange("search", e.target.value)}
                  />
                </div>

                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–í–∏–¥ –¢–û</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ –¢–û..."
                    value={filters.maintenance_type}
                    onChange={(e) => handleFilterChange("maintenance_type", e.target.value)}
                  />
                </div>

                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä..."
                    value={filters.machine_serial}
                    onChange={(e) => handleFilterChange("machine_serial", e.target.value)}
                  />
                </div>

                <div className={styles.filterGroup}>
                  <label className={styles.filterLabel}>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</label>
                  <input
                    type="text"
                    className={styles.filterInput}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏..."
                    value={filters.service_company}
                    onChange={(e) => handleFilterChange("service_company", e.target.value)}
                  />
                </div>
              </div>

              <div className={styles.filterButtons}>
                <button className={`${styles.filterButton} ${styles.filterButtonPrimary}`} onClick={handleSearch}>
                  <Search size={20} />
                  –ù–∞–π—Ç–∏
                </button>
                <button className={`${styles.filterButton} ${styles.filterButtonSecondary}`} onClick={handleReset}>
                  <RotateCcw size={20} />
                  –°–±—Ä–æ—Å–∏—Ç—å
                </button>
              </div>
            </div>

            {/* Data Table */}
            <div className={styles.dataSection}>
              <div className={styles.dataHeader}>
                <div className={styles.dataTitle}>üìã –ó–∞–ø–∏—Å–∏ –æ –¢–û</div>
                <div className={styles.dataCount}>–ù–∞–π–¥–µ–Ω–æ: {filteredMaintenance.length}</div>
              </div>

              <div className={styles.tableContainer}>
                {loading ? (
                  <div className={styles.loadingState}>
                    <div className={styles.loadingSpinner}></div>
                    <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
                  </div>
                ) : error && !isAuthError ? (
                  <div className={styles.errorState}>
                    <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                    <h3 className={styles.errorTitle}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                    <p className={styles.errorText}>{error}</p>
                  </div>
                ) : filteredMaintenance.length === 0 ? (
                  <div className={styles.emptyState}>
                    <div className={styles.emptyStateIcon}>üîç</div>
                    <h3 className={styles.emptyStateTitle}>–ó–∞–ø–∏—Å–∏ –æ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p className={styles.emptyStateText}>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
                  </div>
                ) : (
                  <table className={styles.table}>
                    <thead className={styles.tableHeader}>
                      <tr>
                        <th className={styles.tableHeaderCell}>–í–∏–¥ –¢–û</th>
                        <th className={styles.tableHeaderCell}>–î–∞—Ç–∞ –¢–û</th>
                        <th className={styles.tableHeaderCell}>–ù–∞—Ä–∞–±–æ—Ç–∫–∞, –º/—á–∞—Å</th>
                        <th className={styles.tableHeaderCell}>‚Ññ –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥–∞</th>
                        <th className={styles.tableHeaderCell}>–ú–∞—à–∏–Ω–∞</th>
                        <th className={styles.tableHeaderCell}>–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredMaintenance.map((item) => (
                        <tr
                          key={item.id}
                          className={`${styles.tableRow} ${styles.tableRowClickable}`}
                          onClick={() => (window.location.href = `/maintenance/${item.id}`)}
                          style={{ cursor: "pointer" }}
                        >
                          <td className={`${styles.tableCell} ${styles.tableCellBold}`}>
                            {item.maintenance_type?.name || "‚Äî"}
                          </td>
                          <td className={styles.tableCell}>
                            {item.maintenance_date ? new Date(item.maintenance_date).toLocaleDateString("ru-RU") : "‚Äî"}
                          </td>
                          <td className={styles.tableCell}>{item.operating_hours || "‚Äî"}</td>
                          <td className={styles.tableCell}>
                            <div>{item.work_order_number || "‚Äî"}</div>
                            <div className={styles.tableCellMuted}>
                              {item.work_order_date ? new Date(item.work_order_date).toLocaleDateString("ru-RU") : ""}
                            </div>
                          </td>
                          <td className={styles.tableCell}>
                            <div className={styles.tableCellBold}>‚Ññ {item.machine_serial || "‚Äî"}</div>
                          </td>
                          <td className={styles.tableCell}>{item.service_company_name || "‚Äî"}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                )}
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

export default MaintenancePage
