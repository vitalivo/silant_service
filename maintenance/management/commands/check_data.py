from django.core.management.base import BaseCommand
from maintenance.models import Maintenance
from complaints.models import Complaint
from machines.models import Machine
from django.contrib.auth.models import User

class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("=== –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –ë–ê–ó–ï ==="))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.objects.all()
        self.stdout.write(f"\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users.count()}")
        
        for user in users:
            groups = list(user.groups.values_list('name', flat=True))
            self.stdout.write(f"  üë§ {user.username} | {user.get_full_name()} | –ì—Ä—É–ø–ø—ã: {groups}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—à–∏–Ω—ã
        machines = Machine.objects.all()
        self.stdout.write(f"\nüöõ –í—Å–µ–≥–æ –º–∞—à–∏–Ω: {machines.count()}")
        
        if machines.exists():
            machine = machines.first()
            self.stdout.write(f"  –ü—Ä–∏–º–µ—Ä –º–∞—à–∏–Ω—ã: {machine.serial_number}")
            self.stdout.write(f"  –ö–ª–∏–µ–Ω—Ç: {machine.client}")
            self.stdout.write(f"  –°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {machine.service_company}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û
        maintenance = Maintenance.objects.all()
        self.stdout.write(f"\nüîß –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¢–û: {maintenance.count()}")
        
        if maintenance.exists():
            for i, m in enumerate(maintenance[:3], 1):
                self.stdout.write(f"  –¢–û #{i}:")
                self.stdout.write(f"    –ú–∞—à–∏–Ω–∞: {m.machine}")
                self.stdout.write(f"    –°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {m.service_company}")
                self.stdout.write(f"    –¢–∏–ø —Å–µ—Ä–≤–∏—Å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏: {type(m.service_company)}")
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                if m.service_company:
                    if hasattr(m.service_company, 'get_full_name'):
                        self.stdout.write(f"    –ò–º—è (get_full_name): '{m.service_company.get_full_name()}'")
                    if hasattr(m.service_company, 'username'):
                        self.stdout.write(f"    Username: '{m.service_company.username}'")
                    if hasattr(m.service_company, 'name'):
                        self.stdout.write(f"    Name: '{m.service_company.name}'")
                    self.stdout.write(f"    –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: '{str(m.service_company)}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏
        complaints = Complaint.objects.all()
        self.stdout.write(f"\nüìã –í—Å–µ–≥–æ —Ä–µ–∫–ª–∞–º–∞—Ü–∏–π: {complaints.count()}")
        
        if complaints.exists():
            complaint = complaints.first()
            self.stdout.write(f"  –ü—Ä–∏–º–µ—Ä —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏: {complaint.failure_description[:50]}...")
            self.stdout.write(f"  –ú–∞—à–∏–Ω–∞: {complaint.machine}")
            self.stdout.write(f"  –°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {complaint.service_company}")
            self.stdout.write(f"  –¢–∏–ø: {type(complaint.service_company)}")
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"))
